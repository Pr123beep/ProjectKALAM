{
    "sourceFile": "src/MainPage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1743183637165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743183758205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import React, { useState, useEffect } from \"react\";\r\n import { copyData } from \"./copyData\";\r\n import FilterBar from \"./components/FilterBar\";\r\n import StartupCard from \"./components/StartupCard\";\r\n-import \"./MainPage.css\"; // Optional: add main page–specific styles or reuse App.css\r\n \r\n function MainPage() {\r\n   const [data, setData] = useState([]);\r\n   const [filters, setFilters] = useState({\r\n"
                },
                {
                    "date": 1743184019668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,113 +0,0 @@\n-// src/MainPage.js\r\n-import React, { useState, useEffect } from \"react\";\r\n-import { copyData } from \"./copyData\";\r\n-import FilterBar from \"./components/FilterBar\";\r\n-import StartupCard from \"./components/StartupCard\";\r\n-\r\n-function MainPage() {\r\n-  const [data, setData] = useState([]);\r\n-  const [filters, setFilters] = useState({\r\n-    college: \"\",\r\n-    companyIndustry: \"\",\r\n-    currentLocation: \"\",\r\n-    followersMin: 0,\r\n-    followersMax: 50000\r\n-  });\r\n-  const [visibleCount, setVisibleCount] = useState(5);\r\n-  const [popupVisible, setPopupVisible] = useState(false);\r\n-\r\n-  // Shuffle and deduplicate data on mount\r\n-  useEffect(() => {\r\n-    const dataToShuffle = [...copyData];\r\n-    for (let i = dataToShuffle.length - 1; i > 0; i--) {\r\n-      const j = Math.floor(Math.random() * (i + 1));\r\n-      [dataToShuffle[i], dataToShuffle[j]] = [dataToShuffle[j], dataToShuffle[i]];\r\n-    }\r\n-    const deduped = Object.values(\r\n-      dataToShuffle.reduce((acc, item) => {\r\n-        const key = `${item.companyName}_${item.firstName}_${item.lastName}`;\r\n-        if (!acc[key]) {\r\n-          acc[key] = { ...item, colleges: [item.college] };\r\n-        } else {\r\n-          if (item.college && !acc[key].colleges.includes(item.college)) {\r\n-            acc[key].colleges.push(item.college);\r\n-          }\r\n-        }\r\n-        return acc;\r\n-      }, {})\r\n-    );\r\n-    setData(deduped);\r\n-  }, []);\r\n-\r\n-  const applyFilters = (newFilters) => {\r\n-    setFilters(newFilters);\r\n-    setVisibleCount(5);\r\n-    setPopupVisible(true);\r\n-    setTimeout(() => {\r\n-      setPopupVisible(false);\r\n-    }, 3000);\r\n-  };\r\n-\r\n-  const filteredData = data.filter((item) => {\r\n-    const collegeStr = Array.isArray(item.colleges)\r\n-      ? item.colleges.join(\" \").toLowerCase()\r\n-      : (item.college || \"\").toLowerCase();\r\n-    const industry = (item.companyIndustry || \"\").toLowerCase();\r\n-    const location = (\r\n-      item.currentLocation ||\r\n-      item.linkedinJobLocation ||\r\n-      item.linkedinPreviousJobLocation ||\r\n-      \"\"\r\n-    ).toLowerCase();\r\n-    const followers = item.linkedinFollowersCount || 0;\r\n-    return (\r\n-      collegeStr.includes(filters.college.toLowerCase()) &&\r\n-      industry.includes(filters.companyIndustry.toLowerCase()) &&\r\n-      location.includes(filters.currentLocation.toLowerCase()) &&\r\n-      followers >= filters.followersMin &&\r\n-      followers <= filters.followersMax\r\n-    );\r\n-  });\r\n-\r\n-  // Always randomize the displayed data\r\n-  let displayedData = [...filteredData];\r\n-  for (let i = displayedData.length - 1; i > 0; i--) {\r\n-    const j = Math.floor(Math.random() * (i + 1));\r\n-    [displayedData[i], displayedData[j]] = [displayedData[j], displayedData[i]];\r\n-  }\r\n-\r\n-  const handleLoadMore = () => {\r\n-    setVisibleCount((prev) => prev + 5);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"main-container app-container\">\r\n-      <aside className=\"sidebar\">\r\n-        <FilterBar onApplyFilters={applyFilters} />\r\n-      </aside>\r\n-      <main className=\"content\">\r\n-        {popupVisible && (\r\n-          <div className=\"filter-popup\">\r\n-            Found {displayedData.length} results.\r\n-          </div>\r\n-        )}\r\n-        {displayedData.length ? (\r\n-          <>\r\n-            {displayedData.slice(0, visibleCount).map((item, index) => (\r\n-              <StartupCard key={index} data={item} />\r\n-            ))}\r\n-            {visibleCount < displayedData.length && (\r\n-              <button className=\"load-more\" onClick={handleLoadMore}>\r\n-                Load More\r\n-              </button>\r\n-            )}\r\n-          </>\r\n-        ) : (\r\n-          <p className=\"no-results\">No matching results.</p>\r\n-        )}\r\n-      </main>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-export default MainPage;\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1743199910225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-\n+\r\n"
                },
                {
                    "date": 1743199915426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,2 @@\n \r\n+l\n\\ No newline at end of file\n"
                },
                {
                    "date": 1743200582952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,113 @@\n+ // src/MainPage.js\r\n+import React, { useState, useEffect } from 'react';\r\n\\ No newline at end of file\n+import { copyData } from './copyData';\r\n+import FilterBar from './components/FilterBar';\r\n+import StartupCard from './components/StartupCard';\r\n+import './App.css';\r\n \r\n-l\n+function MainPage() {\r\n+  const [data, setData] = useState([]);\r\n+  const [filters, setFilters] = useState({\r\n+    college: '',\r\n+    companyIndustry: '',\r\n+    currentLocation: '',\r\n+    followersMin: 0,\r\n+    followersMax: 50000\r\n+  });\r\n+  const [visibleCount, setVisibleCount] = useState(5);\r\n+  const [popupVisible, setPopupVisible] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    const dataToShuffle = [...copyData];\r\n+    for (let i = dataToShuffle.length - 1; i > 0; i--) {\r\n+      const j = Math.floor(Math.random() * (i + 1));\r\n+      [dataToShuffle[i], dataToShuffle[j]] = [dataToShuffle[j], dataToShuffle[i]];\r\n+    }\r\n+    const deduped = Object.values(\r\n+      dataToShuffle.reduce((acc, item) => {\r\n+        const key = `${item.companyName}_${item.firstName}_${item.lastName}`;\r\n+        if (!acc[key]) {\r\n+          acc[key] = { ...item, colleges: [item.college] };\r\n+        } else {\r\n+          if (item.college && !acc[key].colleges.includes(item.college)) {\r\n+            acc[key].colleges.push(item.college);\r\n+          }\r\n+        }\r\n+        return acc;\r\n+      }, {})\r\n+    );\r\n+    setData(deduped);\r\n+  }, []);\r\n+\r\n+  const applyFilters = (newFilters) => {\r\n+    setFilters(newFilters);\r\n+    setVisibleCount(5);\r\n+    setPopupVisible(true);\r\n+    setTimeout(() => {\r\n+      setPopupVisible(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  const filteredData = data.filter((item) => {\r\n+    const collegeStr = Array.isArray(item.colleges)\r\n+      ? item.colleges.join(' ').toLowerCase()\r\n+      : (item.college || \"\").toLowerCase();\r\n+    const industry = (item.companyIndustry || \"\").toLowerCase();\r\n+    const location =\r\n+      (\r\n+        item.currentLocation ||\r\n+        item.linkedinJobLocation ||\r\n+        item.linkedinPreviousJobLocation ||\r\n+        \"\"\r\n+      ).toLowerCase();\r\n+    const followers = item.linkedinFollowersCount || 0;\r\n+    return (\r\n+      collegeStr.includes(filters.college.toLowerCase()) &&\r\n+      industry.includes(filters.companyIndustry.toLowerCase()) &&\r\n+      location.includes(filters.currentLocation.toLowerCase()) &&\r\n+      followers >= filters.followersMin &&\r\n+      followers <= filters.followersMax\r\n+    );\r\n+  });\r\n+\r\n+  let displayedData = [...filteredData];\r\n+  for (let i = displayedData.length - 1; i > 0; i--) {\r\n+    const j = Math.floor(Math.random() * (i + 1));\r\n+    [displayedData[i], displayedData[j]] = [displayedData[j], displayedData[i]];\r\n+  }\r\n+\r\n+  const handleLoadMore = () => {\r\n+    setVisibleCount(prev => prev + 5);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"app-container\">\r\n+      <aside className=\"sidebar\">\r\n+        <FilterBar onApplyFilters={applyFilters} />\r\n+      </aside>\r\n+      <main className=\"content\">\r\n+        {popupVisible && (\r\n+          <div className=\"filter-popup\">\r\n+            Found {displayedData.length} results.\r\n+          </div>\r\n+        )}\r\n+        {displayedData.length ? (\r\n+          <>\r\n+            {displayedData.slice(0, visibleCount).map((item, index) => (\r\n+              <StartupCard key={index} data={item} />\r\n+            ))}\r\n+            {visibleCount < displayedData.length && (\r\n+              <button className=\"load-more\" onClick={handleLoadMore}>\r\n+                Load More\r\n+              </button>\r\n+            )}\r\n+          </>\r\n+        ) : (\r\n+          <p className=\"no-results\">No matching results.</p>\r\n+        )}\r\n+      </main>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default MainPage;\r\n"
                },
                {
                    "date": 1743238206708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,113 +0,0 @@\n- // src/MainPage.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import { copyData } from './copyData';\r\n-import FilterBar from './components/FilterBar';\r\n-import StartupCard from './components/StartupCard';\r\n-import './App.css';\r\n-\r\n-function MainPage() {\r\n-  const [data, setData] = useState([]);\r\n-  const [filters, setFilters] = useState({\r\n-    college: '',\r\n-    companyIndustry: '',\r\n-    currentLocation: '',\r\n-    followersMin: 0,\r\n-    followersMax: 50000\r\n-  });\r\n-  const [visibleCount, setVisibleCount] = useState(5);\r\n-  const [popupVisible, setPopupVisible] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    const dataToShuffle = [...copyData];\r\n-    for (let i = dataToShuffle.length - 1; i > 0; i--) {\r\n-      const j = Math.floor(Math.random() * (i + 1));\r\n-      [dataToShuffle[i], dataToShuffle[j]] = [dataToShuffle[j], dataToShuffle[i]];\r\n-    }\r\n-    const deduped = Object.values(\r\n-      dataToShuffle.reduce((acc, item) => {\r\n-        const key = `${item.companyName}_${item.firstName}_${item.lastName}`;\r\n-        if (!acc[key]) {\r\n-          acc[key] = { ...item, colleges: [item.college] };\r\n-        } else {\r\n-          if (item.college && !acc[key].colleges.includes(item.college)) {\r\n-            acc[key].colleges.push(item.college);\r\n-          }\r\n-        }\r\n-        return acc;\r\n-      }, {})\r\n-    );\r\n-    setData(deduped);\r\n-  }, []);\r\n-\r\n-  const applyFilters = (newFilters) => {\r\n-    setFilters(newFilters);\r\n-    setVisibleCount(5);\r\n-    setPopupVisible(true);\r\n-    setTimeout(() => {\r\n-      setPopupVisible(false);\r\n-    }, 3000);\r\n-  };\r\n-\r\n-  const filteredData = data.filter((item) => {\r\n-    const collegeStr = Array.isArray(item.colleges)\r\n-      ? item.colleges.join(' ').toLowerCase()\r\n-      : (item.college || \"\").toLowerCase();\r\n-    const industry = (item.companyIndustry || \"\").toLowerCase();\r\n-    const location =\r\n-      (\r\n-        item.currentLocation ||\r\n-        item.linkedinJobLocation ||\r\n-        item.linkedinPreviousJobLocation ||\r\n-        \"\"\r\n-      ).toLowerCase();\r\n-    const followers = item.linkedinFollowersCount || 0;\r\n-    return (\r\n-      collegeStr.includes(filters.college.toLowerCase()) &&\r\n-      industry.includes(filters.companyIndustry.toLowerCase()) &&\r\n-      location.includes(filters.currentLocation.toLowerCase()) &&\r\n-      followers >= filters.followersMin &&\r\n-      followers <= filters.followersMax\r\n-    );\r\n-  });\r\n-\r\n-  let displayedData = [...filteredData];\r\n-  for (let i = displayedData.length - 1; i > 0; i--) {\r\n-    const j = Math.floor(Math.random() * (i + 1));\r\n-    [displayedData[i], displayedData[j]] = [displayedData[j], displayedData[i]];\r\n-  }\r\n-\r\n-  const handleLoadMore = () => {\r\n-    setVisibleCount(prev => prev + 5);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"app-container\">\r\n-      <aside className=\"sidebar\">\r\n-        <FilterBar onApplyFilters={applyFilters} />\r\n-      </aside>\r\n-      <main className=\"content\">\r\n-        {popupVisible && (\r\n-          <div className=\"filter-popup\">\r\n-            Found {displayedData.length} results.\r\n-          </div>\r\n-        )}\r\n-        {displayedData.length ? (\r\n-          <>\r\n-            {displayedData.slice(0, visibleCount).map((item, index) => (\r\n-              <StartupCard key={index} data={item} />\r\n-            ))}\r\n-            {visibleCount < displayedData.length && (\r\n-              <button className=\"load-more\" onClick={handleLoadMore}>\r\n-                Load More\r\n-              </button>\r\n-            )}\r\n-          </>\r\n-        ) : (\r\n-          <p className=\"no-results\">No matching results.</p>\r\n-        )}\r\n-      </main>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-export default MainPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1743238215971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,113 @@\n+ // src/MainPage.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import { copyData } from './copyData';\r\n+import FilterBar from './components/FilterBar';\r\n+import StartupCard from './components/StartupCard';\r\n+import './App.css';\r\n+\r\n+function MainPage() {\r\n+  const [data, setData] = useState([]);\r\n+  const [filters, setFilters] = useState({\r\n+    college: '',\r\n+    companyIndustry: '',\r\n+    currentLocation: '',\r\n+    followersMin: 0,\r\n+    followersMax: 50000\r\n+  });\r\n+  const [visibleCount, setVisibleCount] = useState(5);\r\n+  const [popupVisible, setPopupVisible] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    const dataToShuffle = [...copyData];\r\n+    for (let i = dataToShuffle.length - 1; i > 0; i--) {\r\n+      const j = Math.floor(Math.random() * (i + 1));\r\n+      [dataToShuffle[i], dataToShuffle[j]] = [dataToShuffle[j], dataToShuffle[i]];\r\n+    }\r\n+    const deduped = Object.values(\r\n+      dataToShuffle.reduce((acc, item) => {\r\n+        const key = `${item.companyName}_${item.firstName}_${item.lastName}`;\r\n+        if (!acc[key]) {\r\n+          acc[key] = { ...item, colleges: [item.college] };\r\n+        } else {\r\n+          if (item.college && !acc[key].colleges.includes(item.college)) {\r\n+            acc[key].colleges.push(item.college);\r\n+          }\r\n+        }\r\n+        return acc;\r\n+      }, {})\r\n+    );\r\n+    setData(deduped);\r\n+  }, []);\r\n+\r\n+  const applyFilters = (newFilters) => {\r\n+    setFilters(newFilters);\r\n+    setVisibleCount(5);\r\n+    setPopupVisible(true);\r\n+    setTimeout(() => {\r\n+      setPopupVisible(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  const filteredData = data.filter((item) => {\r\n+    const collegeStr = Array.isArray(item.colleges)\r\n+      ? item.colleges.join(' ').toLowerCase()\r\n+      : (item.college || \"\").toLowerCase();\r\n+    const industry = (item.companyIndustry || \"\").toLowerCase();\r\n+    const location =\r\n+      (\r\n+        item.currentLocation ||\r\n+        item.linkedinJobLocation ||\r\n+        item.linkedinPreviousJobLocation ||\r\n+        \"\"\r\n+      ).toLowerCase();\r\n+    const followers = item.linkedinFollowersCount || 0;\r\n+    return (\r\n+      collegeStr.includes(filters.college.toLowerCase()) &&\r\n+      industry.includes(filters.companyIndustry.toLowerCase()) &&\r\n+      location.includes(filters.currentLocation.toLowerCase()) &&\r\n+      followers >= filters.followersMin &&\r\n+      followers <= filters.followersMax\r\n+    );\r\n+  });\r\n+\r\n+  let displayedData = [...filteredData];\r\n+  for (let i = displayedData.length - 1; i > 0; i--) {\r\n+    const j = Math.floor(Math.random() * (i + 1));\r\n+    [displayedData[i], displayedData[j]] = [displayedData[j], displayedData[i]];\r\n+  }\r\n+\r\n+  const handleLoadMore = () => {\r\n+    setVisibleCount(prev => prev + 5);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"app-container\">\r\n+      <aside className=\"sidebar\">\r\n+        <FilterBar onApplyFilters={applyFilters} />\r\n+      </aside>\r\n+      <main className=\"content\">\r\n+        {popupVisible && (\r\n+          <div className=\"filter-popup\">\r\n+            Found {displayedData.length} results.\r\n+          </div>\r\n+        )}\r\n+        {displayedData.length ? (\r\n+          <>\r\n+            {displayedData.slice(0, visibleCount).map((item, index) => (\r\n+              <StartupCard key={index} data={item} />\r\n+            ))}\r\n+            {visibleCount < displayedData.length && (\r\n+              <button className=\"load-more\" onClick={handleLoadMore}>\r\n+                Load More\r\n+              </button>\r\n+            )}\r\n+          </>\r\n+        ) : (\r\n+          <p className=\"no-results\">No matching results.</p>\r\n+        )}\r\n+      </main>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default MainPage;\r\n"
                },
                {
                    "date": 1743765938445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,113 +1,485 @@\n  // src/MainPage.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import { copyData } from './copyData';\r\n-import FilterBar from './components/FilterBar';\r\n-import StartupCard from './components/StartupCard';\r\n-import './App.css';\r\n-\r\n-function MainPage() {\r\n-  const [data, setData] = useState([]);\r\n-  const [filters, setFilters] = useState({\r\n-    college: '',\r\n-    companyIndustry: '',\r\n-    currentLocation: '',\r\n-    followersMin: 0,\r\n-    followersMax: 50000\r\n-  });\r\n-  const [visibleCount, setVisibleCount] = useState(5);\r\n-  const [popupVisible, setPopupVisible] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    const dataToShuffle = [...copyData];\r\n-    for (let i = dataToShuffle.length - 1; i > 0; i--) {\r\n-      const j = Math.floor(Math.random() * (i + 1));\r\n-      [dataToShuffle[i], dataToShuffle[j]] = [dataToShuffle[j], dataToShuffle[i]];\r\n-    }\r\n-    const deduped = Object.values(\r\n-      dataToShuffle.reduce((acc, item) => {\r\n-        const key = `${item.companyName}_${item.firstName}_${item.lastName}`;\r\n-        if (!acc[key]) {\r\n-          acc[key] = { ...item, colleges: [item.college] };\r\n-        } else {\r\n-          if (item.college && !acc[key].colleges.includes(item.college)) {\r\n-            acc[key].colleges.push(item.college);\r\n-          }\r\n-        }\r\n-        return acc;\r\n-      }, {})\r\n-    );\r\n-    setData(deduped);\r\n-  }, []);\r\n-\r\n-  const applyFilters = (newFilters) => {\r\n-    setFilters(newFilters);\r\n-    setVisibleCount(5);\r\n-    setPopupVisible(true);\r\n-    setTimeout(() => {\r\n-      setPopupVisible(false);\r\n-    }, 3000);\r\n-  };\r\n-\r\n-  const filteredData = data.filter((item) => {\r\n-    const collegeStr = Array.isArray(item.colleges)\r\n-      ? item.colleges.join(' ').toLowerCase()\r\n-      : (item.college || \"\").toLowerCase();\r\n-    const industry = (item.companyIndustry || \"\").toLowerCase();\r\n-    const location =\r\n-      (\r\n-        item.currentLocation ||\r\n-        item.linkedinJobLocation ||\r\n-        item.linkedinPreviousJobLocation ||\r\n-        \"\"\r\n-      ).toLowerCase();\r\n-    const followers = item.linkedinFollowersCount || 0;\r\n-    return (\r\n-      collegeStr.includes(filters.college.toLowerCase()) &&\r\n-      industry.includes(filters.companyIndustry.toLowerCase()) &&\r\n-      location.includes(filters.currentLocation.toLowerCase()) &&\r\n-      followers >= filters.followersMin &&\r\n-      followers <= filters.followersMax\r\n-    );\r\n-  });\r\n-\r\n-  let displayedData = [...filteredData];\r\n-  for (let i = displayedData.length - 1; i > 0; i--) {\r\n-    const j = Math.floor(Math.random() * (i + 1));\r\n-    [displayedData[i], displayedData[j]] = [displayedData[j], displayedData[i]];\r\n-  }\r\n-\r\n-  const handleLoadMore = () => {\r\n-    setVisibleCount(prev => prev + 5);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"app-container\">\r\n-      <aside className=\"sidebar\">\r\n-        <FilterBar onApplyFilters={applyFilters} />\r\n-      </aside>\r\n-      <main className=\"content\">\r\n-        {popupVisible && (\r\n-          <div className=\"filter-popup\">\r\n-            Found {displayedData.length} results.\r\n-          </div>\r\n-        )}\r\n-        {displayedData.length ? (\r\n-          <>\r\n-            {displayedData.slice(0, visibleCount).map((item, index) => (\r\n-              <StartupCard key={index} data={item} />\r\n-            ))}\r\n-            {visibleCount < displayedData.length && (\r\n-              <button className=\"load-more\" onClick={handleLoadMore}>\r\n-                Load More\r\n-              </button>\r\n-            )}\r\n-          </>\r\n-        ) : (\r\n-          <p className=\"no-results\">No matching results.</p>\r\n-        )}\r\n-      </main>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-export default MainPage;\r\n+ import React, { useState, useEffect } from 'react';\r\n+ import { motion, AnimatePresence } from 'framer-motion';\r\n+ import wellfoundData from './wellfndAndphantom.json'; // Import Wellfound data\r\n+ import iitRedditData from './iit-reddit.json'; // Import Reddit data\r\n+ import FilterBar from './components/FilterBar';\r\n+ import StartupCard from './components/StartupCard';\r\n+ import Pagination from './components/Pagination';\r\n+ import './App.css';\r\n+ \r\n+ // Enhanced function for normalizing all types of college names\r\n+ const normalizeCollegeName = (name) => {\r\n+   if (!name) return '';\r\n+   \r\n+   // Convert to lowercase for case-insensitive matching\r\n+   const lowercaseName = name.toLowerCase().trim();\r\n+   \r\n+   // Expanded abbreviation mappings for various institutions\r\n+   const abbreviations = {\r\n+     // Core IIM abbreviations\r\n+     'iim': 'indian institute of management',\r\n+     'iim-a': 'indian institute of management ahmedabad',\r\n+     'iima': 'indian institute of management ahmedabad',\r\n+     'iim ahmedabad': 'indian institute of management ahmedabad',\r\n+     \r\n+     // Keep existing IIT mappings\r\n+     'iit': 'indian institute of technology',\r\n+     'bits': 'birla institute of technology and science',\r\n+     \r\n+     // General terms\r\n+     'inst': 'institute',\r\n+     'mgmt': 'management'\r\n+   };\r\n+   \r\n+   // Campus city abbreviations\r\n+   const cityAbbreviations = {\r\n+     'a': 'ahmedabad',\r\n+     'b': 'bangalore',\r\n+     'c': 'calcutta',\r\n+     'l': 'lucknow',\r\n+     'i': 'indore'\r\n+   };\r\n+   \r\n+   // Replace known abbreviations in the search term\r\n+   let normalized = lowercaseName;\r\n+   \r\n+   // Process each abbreviation\r\n+   Object.entries(abbreviations).forEach(([abbr, full]) => {\r\n+     // Use word boundary to replace whole words only\r\n+     normalized = normalized.replace(new RegExp(`\\\\b${abbr}\\\\b`, 'g'), full);\r\n+   });\r\n+   \r\n+   // Handle city abbreviations for campus locations\r\n+   for (const [abbr, full] of Object.entries(cityAbbreviations)) {\r\n+     // Handle patterns like \"management a\" or \"management, a\"\r\n+     normalized = normalized.replace(\r\n+       new RegExp(`(management)\\\\s*[,\\\\s]+\\\\b${abbr}\\\\b`, 'g'),\r\n+       `$1 ${full}`\r\n+     );\r\n+   }\r\n+   \r\n+   // Special case for IIM Ahmedabad variations\r\n+   if (normalized.includes('indian institute of management') && \r\n+       (normalized.includes('ahmedabad') || normalized.includes('-a') || normalized.includes(' a '))) {\r\n+     normalized = 'indian institute of management ahmedabad';\r\n+   }\r\n+   \r\n+   // Clean up punctuation and spacing\r\n+   normalized = normalized.replace(/[.,/#!$%^&*;:{}=\\-_`~()]/g, ' ')  // Replace punctuation with spaces\r\n+                        .replace(/\\s+/g, ' ')                          // Normalize spaces\r\n+                        .trim();                                       // Trim ends\r\n+   \r\n+   return normalized;\r\n+ };\r\n+ \r\n+ // Keep the robust matching function\r\n+ const matchesCollege = (itemColleges, searchTerm) => {\r\n+   if (!searchTerm || searchTerm.trim() === '') return true;\r\n+   if (!itemColleges) return false;\r\n+   \r\n+   // Normalize the search term\r\n+   const normalizedSearch = normalizeCollegeName(searchTerm);\r\n+   \r\n+   // Special case for IIM Ahmedabad\r\n+   const isIIMASearch = normalizedSearch.includes('indian institute of management ahmedabad');\r\n+   \r\n+   // Function to check if a college string matches IIM Ahmedabad\r\n+   const matchesIIMA = (collegeString) => {\r\n+     const normalizedCollege = normalizeCollegeName(collegeString);\r\n+     \r\n+     if (isIIMASearch) {\r\n+       return normalizedCollege.includes('indian institute of management ahmedabad');\r\n+     }\r\n+     \r\n+     return normalizedCollege.includes(normalizedSearch) || \r\n+            normalizedSearch.includes(normalizedCollege);\r\n+   };\r\n+   \r\n+   // Process array of colleges\r\n+   if (Array.isArray(itemColleges)) {\r\n+     return itemColleges.some(college => matchesIIMA(college));\r\n+   }\r\n+   \r\n+   // Process single college string\r\n+   return matchesIIMA(itemColleges);\r\n+ };\r\n+ \r\n+ // Updated helper function to format result counts with ++ for rounded numbers\r\n+ const formatResultCount = (count) => {\r\n+   // Show exact count for small numbers\r\n+   if (count <= 20) {\r\n+     return count.toString();\r\n+   } \r\n+   // For 21-99: round to nearest 10\r\n+   else if (count <= 99) {\r\n+     const rounded = Math.floor(count / 10) * 10;\r\n+     return count === rounded ? count.toString() : `${rounded}++`;\r\n+   } \r\n+   // For 100-999: round to nearest 50\r\n+   else if (count <= 999) {\r\n+     const rounded = Math.floor(count / 50) * 50;\r\n+     return count === rounded ? count.toString() : `${rounded}++`;\r\n+   } \r\n+   // For 1000-9999: round to nearest 100\r\n+   else if (count <= 9999) {\r\n+     const rounded = Math.floor(count / 100) * 100;\r\n+     return count === rounded ? count.toString() : `${rounded}++`;\r\n+   } \r\n+   // For very large numbers: round to nearest 1000\r\n+   else {\r\n+     const rounded = Math.floor(count / 1000) * 1000;\r\n+     return count === rounded ? count.toString() : `${rounded}++`;\r\n+   }\r\n+ };\r\n+ \r\n+ function MainPage() {\r\n+   const [data, setData] = useState([]);\r\n+   const [filters, setFilters] = useState({\r\n+     college: '',\r\n+     companyIndustry: '',\r\n+     currentLocation: '',\r\n+     followersMin: 0,\r\n+     followersMax: 50000,\r\n+     profileSources: {\r\n+       linkedin: false,\r\n+       wellfound: false\r\n+     }\r\n+   });\r\n+   const [currentPage, setCurrentPage] = useState(1);\r\n+   const [popupVisible, setPopupVisible] = useState(false);\r\n+   const itemsPerPage = 10; // Number of cards per page\r\n+ \r\n+   useEffect(() => {\r\n+     // Use wellfoundData directly instead of copyData\r\n+     const dataToShuffle = [...wellfoundData];\r\n+     \r\n+     // First filter out entries with no meaningful data\r\n+     const validData = dataToShuffle.filter(item => {\r\n+       // Check for minimum required data\r\n+       const hasBasicInfo = item.firstName && \r\n+                           item.lastName && \r\n+                           item.companyName;\r\n+       \r\n+       // Check for at least one source of data\r\n+       const hasLinkedInData = item.linkedinProfileUrl || \r\n+                              item.linkedinCompanyUrl || \r\n+                              item.linkedinHeadline;\r\n+       \r\n+       const hasWellfoundData = item.wellFoundURL || \r\n+                               item.wellFoundProfileURL;\r\n+       \r\n+       // Entry must have basic info AND at least one source of data\r\n+       return hasBasicInfo && (hasLinkedInData || hasWellfoundData);\r\n+     });\r\n+ \r\n+   \r\n+     \r\n+     // Add debug logging for Reddit data\r\n+     console.log('Loading Reddit data:', iitRedditData);\r\n+     \r\n+     // Deduplicate the data and add Reddit data\r\n+     const deduped = Object.values(\r\n+       validData.reduce((acc, item) => {\r\n+         const key = `${item.companyName}_${item.firstName}_${item.lastName}`;\r\n+         \r\n+         // Find Reddit data for this founder\r\n+         const founderName = `${item.firstName} ${item.lastName}`.toLowerCase();\r\n+         const redditData = iitRedditData.find(redditItem => \r\n+           redditItem.query.toLowerCase().includes(founderName)\r\n+         );\r\n+         \r\n+         // Get Reddit URL and mention status\r\n+         const redditUrl = redditData && \r\n+                          redditData.results && \r\n+                          redditData.results.length > 0 ? \r\n+                          redditData.results[0].url : null;\r\n+         \r\n+         const isMentionedOnReddit = Boolean(redditData);\r\n+ \r\n+         if (!acc[key]) {\r\n+           acc[key] = { \r\n+             ...item, \r\n+             colleges: item.college ? [item.college] : [],\r\n+             college: item.college || '',\r\n+             hasWellfound: Boolean(item.wellFoundURL || item.wellFoundProfileURL),\r\n+             redditUrl,           // Add Reddit URL\r\n+             isMentionedOnReddit  // Add Reddit mention status\r\n+           };\r\n+         } else {\r\n+           // Add college to colleges array if it exists and isn't already included\r\n+           if (item.college && !acc[key].colleges.includes(item.college)) {\r\n+             acc[key].colleges.push(item.college);\r\n+           }\r\n+           \r\n+           // Update the single college field if it's empty and we have a new one\r\n+           if (!acc[key].college && item.college) {\r\n+             acc[key].college = item.college;\r\n+           }\r\n+           \r\n+           // Update Wellfound data if present\r\n+           if (item.wellFoundURL) {\r\n+             acc[key].wellFoundURL = item.wellFoundURL;\r\n+           }\r\n+           if (item.wellFoundProfileURL) {\r\n+             acc[key].wellFoundProfileURL = item.wellFoundProfileURL;\r\n+           }\r\n+           if (item.wellFoundURL || item.wellFoundProfileURL) {\r\n+             acc[key].hasWellfound = true;\r\n+           }\r\n+         }\r\n+         return acc;\r\n+       }, {})\r\n+     );\r\n+     \r\n+     // Add debug logging for college data\r\n+     console.log('Sample deduped data:', deduped.slice(0, 5).map(item => ({\r\n+       name: `${item.firstName} ${item.lastName}`,\r\n+       college: item.college,\r\n+       colleges: item.colleges\r\n+     })));\r\n+     \r\n+     setData(deduped);\r\n+   }, []);\r\n+ \r\n+   useEffect(() => {\r\n+     if (data.length > 0) {\r\n+       console.log(\"Filter Debug Info:\");\r\n+       console.log(\"Total profiles:\", data.length);\r\n+       \r\n+       // Check Wellfound data presence\r\n+       const withWellfoundURL = data.filter(item => item.wellFoundURL).length;\r\n+       const withWellfoundProfileURL = data.filter(item => item.wellFoundProfileURL).length;\r\n+       const withEitherWellfound = data.filter(item => item.wellFoundURL || item.wellFoundProfileURL).length;\r\n+       \r\n+       console.log(\"Profiles with Wellfound Company URL:\", withWellfoundURL);\r\n+       console.log(\"Profiles with Wellfound Profile URL:\", withWellfoundProfileURL);\r\n+       console.log(\"Profiles with any Wellfound data:\", withEitherWellfound);\r\n+       \r\n+       // Log some sample data\r\n+       console.log(\"Sample profile with Wellfound data:\", \r\n+         data.find(item => item.wellFoundURL || item.wellFoundProfileURL));\r\n+     }\r\n+   }, [data]);\r\n+ \r\n+   const applyFilters = (newFilters) => {\r\n+     setFilters(newFilters);\r\n+     setCurrentPage(1); // Reset to first page when filters change\r\n+     setPopupVisible(true);\r\n+     setTimeout(() => {\r\n+       setPopupVisible(false);\r\n+     }, 3000);\r\n+   };\r\n+ \r\n+   const filteredData = data.filter((item) => {\r\n+     // Source filtering logic\r\n+     const showLinkedIn = filters.profileSources.linkedin;\r\n+     const showWellfound = filters.profileSources.wellfound;\r\n+     const hasWellfoundData = Boolean(item.wellFoundURL || item.wellFoundProfileURL);\r\n+     const hasLinkedInData = Boolean(item.linkedinProfileUrl);\r\n+     \r\n+     // If no checkboxes are selected, show ALL data\r\n+     if (!showLinkedIn && !showWellfound) {\r\n+       // Pass everything through when no source filters are selected\r\n+     } \r\n+     // If only LinkedIn is checked\r\n+     else if (showLinkedIn && !showWellfound) {\r\n+       // Only show profiles with LinkedIn data but NO Wellfound data\r\n+       if (!hasLinkedInData || hasWellfoundData) {\r\n+         return false;\r\n+       }\r\n+     } \r\n+     // If only Wellfound is checked\r\n+     else if (!showLinkedIn && showWellfound) {\r\n+       // Show all profiles with Wellfound data, regardless of LinkedIn status\r\n+       if (!hasWellfoundData) {\r\n+         return false;\r\n+       }\r\n+     }\r\n+     // If both LinkedIn and Wellfound are checked\r\n+     else if (showLinkedIn && showWellfound) {\r\n+       // Same behavior as only Wellfound checked - show all profiles with Wellfound data\r\n+       if (!hasWellfoundData) {\r\n+         return false;\r\n+       }\r\n+     }\r\n+     \r\n+     // Apply other filters only to profiles that passed the source filter\r\n+     if (filters.college) {\r\n+       const collegeData = Array.isArray(item.colleges) ? item.colleges : item.college;\r\n+       if (!matchesCollege(collegeData, filters.college)) {\r\n+         return false;\r\n+       }\r\n+     }\r\n+     \r\n+     const industry = (item.companyIndustry || \"\").toLowerCase();\r\n+     const location = (item.currentLocation || item.location || \"\").toLowerCase();\r\n+     const followers = parseInt(item.linkedinFollowersCount) || 0;\r\n+     \r\n+     return (\r\n+       industry.includes(filters.companyIndustry.toLowerCase()) &&\r\n+       location.includes(filters.currentLocation.toLowerCase()) &&\r\n+       followers >= filters.followersMin &&\r\n+       followers <= filters.followersMax\r\n+     );\r\n+   });\r\n+ \r\n+   useEffect(() => {\r\n+     if (filteredData.length > 0) {\r\n+       console.log(\"Filtered Results:\", filteredData.length);\r\n+       console.log(\"Current filters:\", filters);\r\n+     }\r\n+   }, [filteredData, filters]);\r\n+ \r\n+   // Calculate pagination values\r\n+   const totalPages = Math.ceil(filteredData.length / itemsPerPage);\r\n+   const startIndex = (currentPage - 1) * itemsPerPage;\r\n+   const currentItems = filteredData.slice(startIndex, startIndex + itemsPerPage);\r\n+ \r\n+   const handlePageChange = (pageNumber) => {\r\n+     setCurrentPage(pageNumber);\r\n+     // Scroll to top when changing pages\r\n+     window.scrollTo({ top: 0, behavior: 'smooth' });\r\n+   };\r\n+ \r\n+   // Add this useEffect for better debugging the college search\r\n+   useEffect(() => {\r\n+     if (filters.college) {\r\n+       console.log(\"College Search Debug:\");\r\n+       console.log(\"Original search term:\", filters.college);\r\n+       console.log(\"Normalized search term:\", normalizeCollegeName(filters.college));\r\n+       \r\n+       // Find some sample items with college data\r\n+       const sampleItems = data.slice(0, 50);\r\n+       \r\n+       const matches = sampleItems.filter(item => {\r\n+         const collegeData = Array.isArray(item.colleges) ? item.colleges : item.college;\r\n+         return matchesCollege(collegeData, filters.college);\r\n+       });\r\n+       \r\n+       console.log(`Found ${matches.length} matches among the first 50 items`);\r\n+       \r\n+       if (matches.length > 0) {\r\n+         console.log(\"Sample matches:\", matches.slice(0, 3).map(item => ({\r\n+           name: `${item.firstName} ${item.lastName}`,\r\n+           college: Array.isArray(item.colleges) ? item.colleges : item.college,\r\n+           normalizedCollege: Array.isArray(item.colleges) \r\n+             ? item.colleges.map(c => normalizeCollegeName(c))\r\n+             : normalizeCollegeName(item.college)\r\n+         })));\r\n+       } else {\r\n+         // If no matches, show some sample college entries\r\n+         console.log(\"No matches found. Sample college entries from data:\", \r\n+           sampleItems.slice(0, 5).map(item => ({\r\n+             college: Array.isArray(item.colleges) ? item.colleges : item.college,\r\n+             normalized: Array.isArray(item.colleges) \r\n+               ? item.colleges.map(c => normalizeCollegeName(c))\r\n+               : normalizeCollegeName(item.college)\r\n+           }))\r\n+         );\r\n+       }\r\n+     }\r\n+   }, [filters.college, data]);\r\n+ \r\n+   // Add debug logging to help track the matching process\r\n+   useEffect(() => {\r\n+     if (filters.college && filters.college.toLowerCase().includes('iim')) {\r\n+       console.log(\"IIM Search Debug:\");\r\n+       console.log(\"Search term:\", filters.college);\r\n+       console.log(\"Normalized search term:\", normalizeCollegeName(filters.college));\r\n+       \r\n+       // Sample the first few items to check matching\r\n+       const sampleItems = data.slice(0, 10);\r\n+       sampleItems.forEach(item => {\r\n+         const collegeData = Array.isArray(item.colleges) ? item.colleges : item.college;\r\n+         console.log(\"Checking college:\", collegeData);\r\n+         console.log(\"Normalized college:\", Array.isArray(collegeData) \r\n+           ? collegeData.map(c => normalizeCollegeName(c))\r\n+           : normalizeCollegeName(collegeData)\r\n+         );\r\n+         console.log(\"Matches?\", matchesCollege(collegeData, filters.college));\r\n+       });\r\n+     }\r\n+   }, [filters.college, data]);\r\n+ \r\n+   return (\r\n+     <div className=\"app-container\">\r\n+       <aside className=\"sidebar\">\r\n+         <FilterBar onApplyFilters={applyFilters} />\r\n+       </aside>\r\n+       <main className=\"content\">\r\n+         {popupVisible && (\r\n+           <div className=\"filter-popup\">\r\n+             Found {filteredData.length} results.\r\n+           </div>\r\n+         )}\r\n+         \r\n+         {/* Display the filter helper message when no source filters are selected */}\r\n+         {!filters.profileSources.linkedin && !filters.profileSources.wellfound && (\r\n+           <div className=\"filter-helper\">\r\n+             <div className=\"filter-helper-icon\">🔍</div>\r\n+             <h3>Search and filter results</h3>\r\n+             <p>\r\n+               Use the filters to narrow down these results by source (LinkedIn/Wellfound), \r\n+               college, industry, and more!\r\n+             </p>\r\n+           </div>\r\n+         )}\r\n+         \r\n+         {/* Enhanced results counter with rounded numbers - shown when filters are applied */}\r\n+         {(filters.college || \r\n+           filters.companyIndustry || \r\n+           filters.currentLocation || \r\n+           filters.profileSources.linkedin || \r\n+           filters.profileSources.wellfound ||\r\n+           filters.followersMin > 0 ||\r\n+           filters.followersMax < 50000) && (\r\n+           <div className=\"filter-results-counter\">\r\n+             <div className=\"results-icon\">✨</div>\r\n+             <div className=\"results-text\">\r\n+               <span className=\"results-count\">\r\n+                 {formatResultCount(filteredData.length)}\r\n+               </span>\r\n+               {filteredData.length === 1 ? (\r\n+                 \"matching founder found\"\r\n+               ) : (\r\n+                 \"founders match your filters\"\r\n+               )}\r\n+             </div>\r\n+           </div>\r\n+         )}\r\n+         \r\n+         <AnimatePresence mode=\"wait\">\r\n+           <motion.div\r\n+             key={currentPage}\r\n+             initial={{ opacity: 0, y: 20 }}\r\n+             animate={{ opacity: 1, y: 0 }}\r\n+             exit={{ opacity: 0, y: -20 }}\r\n+             transition={{ duration: 0.3 }}\r\n+           >\r\n+             {currentItems.length ? (\r\n+               <>\r\n+                 {currentItems.map((item, index) => (\r\n+               <StartupCard key={index} data={item} />\r\n+             ))}\r\n+           </>\r\n+         ) : (\r\n+           <p className=\"no-results\">No matching results.</p>\r\n+             )}\r\n+           </motion.div>\r\n+         </AnimatePresence>\r\n+         \r\n+         {filteredData.length > 0 && (\r\n+           <Pagination \r\n+             currentPage={currentPage} \r\n+             totalPages={totalPages} \r\n+             onPageChange={handlePageChange} \r\n+           />\r\n+         )}\r\n+       </main>\r\n+     </div>\r\n+   );\r\n+ }\r\n+ \r\n+ export default MainPage;\r\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1743183637165,
            "name": "Commit-0",
            "content": "// src/MainPage.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { copyData } from \"./copyData\";\r\nimport FilterBar from \"./components/FilterBar\";\r\nimport StartupCard from \"./components/StartupCard\";\r\nimport \"./MainPage.css\"; // Optional: add main page–specific styles or reuse App.css\r\n\r\nfunction MainPage() {\r\n  const [data, setData] = useState([]);\r\n  const [filters, setFilters] = useState({\r\n    college: \"\",\r\n    companyIndustry: \"\",\r\n    currentLocation: \"\",\r\n    followersMin: 0,\r\n    followersMax: 50000\r\n  });\r\n  const [visibleCount, setVisibleCount] = useState(5);\r\n  const [popupVisible, setPopupVisible] = useState(false);\r\n\r\n  // Shuffle and deduplicate data on mount\r\n  useEffect(() => {\r\n    const dataToShuffle = [...copyData];\r\n    for (let i = dataToShuffle.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [dataToShuffle[i], dataToShuffle[j]] = [dataToShuffle[j], dataToShuffle[i]];\r\n    }\r\n    const deduped = Object.values(\r\n      dataToShuffle.reduce((acc, item) => {\r\n        const key = `${item.companyName}_${item.firstName}_${item.lastName}`;\r\n        if (!acc[key]) {\r\n          acc[key] = { ...item, colleges: [item.college] };\r\n        } else {\r\n          if (item.college && !acc[key].colleges.includes(item.college)) {\r\n            acc[key].colleges.push(item.college);\r\n          }\r\n        }\r\n        return acc;\r\n      }, {})\r\n    );\r\n    setData(deduped);\r\n  }, []);\r\n\r\n  const applyFilters = (newFilters) => {\r\n    setFilters(newFilters);\r\n    setVisibleCount(5);\r\n    setPopupVisible(true);\r\n    setTimeout(() => {\r\n      setPopupVisible(false);\r\n    }, 3000);\r\n  };\r\n\r\n  const filteredData = data.filter((item) => {\r\n    const collegeStr = Array.isArray(item.colleges)\r\n      ? item.colleges.join(\" \").toLowerCase()\r\n      : (item.college || \"\").toLowerCase();\r\n    const industry = (item.companyIndustry || \"\").toLowerCase();\r\n    const location = (\r\n      item.currentLocation ||\r\n      item.linkedinJobLocation ||\r\n      item.linkedinPreviousJobLocation ||\r\n      \"\"\r\n    ).toLowerCase();\r\n    const followers = item.linkedinFollowersCount || 0;\r\n    return (\r\n      collegeStr.includes(filters.college.toLowerCase()) &&\r\n      industry.includes(filters.companyIndustry.toLowerCase()) &&\r\n      location.includes(filters.currentLocation.toLowerCase()) &&\r\n      followers >= filters.followersMin &&\r\n      followers <= filters.followersMax\r\n    );\r\n  });\r\n\r\n  // Always randomize the displayed data\r\n  let displayedData = [...filteredData];\r\n  for (let i = displayedData.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [displayedData[i], displayedData[j]] = [displayedData[j], displayedData[i]];\r\n  }\r\n\r\n  const handleLoadMore = () => {\r\n    setVisibleCount((prev) => prev + 5);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-container app-container\">\r\n      <aside className=\"sidebar\">\r\n        <FilterBar onApplyFilters={applyFilters} />\r\n      </aside>\r\n      <main className=\"content\">\r\n        {popupVisible && (\r\n          <div className=\"filter-popup\">\r\n            Found {displayedData.length} results.\r\n          </div>\r\n        )}\r\n        {displayedData.length ? (\r\n          <>\r\n            {displayedData.slice(0, visibleCount).map((item, index) => (\r\n              <StartupCard key={index} data={item} />\r\n            ))}\r\n            {visibleCount < displayedData.length && (\r\n              <button className=\"load-more\" onClick={handleLoadMore}>\r\n                Load More\r\n              </button>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <p className=\"no-results\">No matching results.</p>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n"
        }
    ]
}