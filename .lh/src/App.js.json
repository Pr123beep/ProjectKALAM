{
    "sourceFile": "src/App.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1743071120583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743071866146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,45 @@\n // src/App.js\n-import React from 'react';\n-import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n+import React, { useState } from 'react';\n+import { copyData } from './copyData';\n+import FilterBar from './components/FilterBar';\n+import StartupCard from './components/StartupCard';\n+import './App.css';\n \n-import HomePage from './pages/HomePage';\n-// (Add additional pages if needed)\n-import Navbar from './components/layout/Navbar';\n-import Footer from './components/layout/Footer';\n+function App() {\n+  const [filters, setFilters] = useState({\n+    college: '',\n+    companyIndustry: '',\n+    currentLocation: ''\n+  });\n \n-function App() {\n+  const handleFilterChange = (name, value) => {\n+    setFilters(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const filteredData = copyData.filter(item => {\n+    return (\n+      item.college.toLowerCase().includes(filters.college.toLowerCase()) &&\n+      item.companyIndustry.toLowerCase().includes(filters.companyIndustry.toLowerCase()) &&\n+      item.currentLocation.toLowerCase().includes(filters.currentLocation.toLowerCase())\n+    );\n+  });\n+\n   return (\n-    <Router>\n-      <Navbar />\n-      <Routes>\n-        <Route path=\"/\" element={<HomePage />} />\n-        {/* Additional routes can go here */}\n-      </Routes>\n-      <Footer />\n-    </Router>\n+    <div className=\"app-container\">\n+      <aside className=\"sidebar\">\n+        <FilterBar filters={filters} onFilterChange={handleFilterChange} />\n+      </aside>\n+      <main className=\"content\">\n+        {filteredData.length ? (\n+          filteredData.map((item, index) => (\n+            <StartupCard key={index} data={item} />\n+          ))\n+        ) : (\n+          <p className=\"no-results\">No matching results.</p>\n+        )}\n+      </main>\n+    </div>\n   );\n }\n \n export default App;\n"
                },
                {
                    "date": 1743074702779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,40 +1,119 @@\n // src/App.js\n-import React, { useState } from 'react';\n+import React, { useState, useEffect } from 'react';\n import { copyData } from './copyData';\n import FilterBar from './components/FilterBar';\n import StartupCard from './components/StartupCard';\n import './App.css';\n \n function App() {\n+  // State to hold the randomized and deduplicated dataset\n+  const [data, setData] = useState([]);\n+  // State for the advanced filters\n   const [filters, setFilters] = useState({\n     college: '',\n     companyIndustry: '',\n-    currentLocation: ''\n+    currentLocation: '',\n+    followersMin: '',\n+    followersMax: '',\n+    sortBy: 'random'  // Default sort is random\n   });\n+  // Lazy-loading: initially show 5 items\n+  const [visibleCount, setVisibleCount] = useState(5);\n \n-  const handleFilterChange = (name, value) => {\n-    setFilters(prev => ({ ...prev, [name]: value }));\n+  // On initial load, shuffle and deduplicate the data\n+  useEffect(() => {\n+    const dataToShuffle = [...copyData];\n+    // Fisher-Yates shuffle\n+    for (let i = dataToShuffle.length - 1; i > 0; i--) {\n+      const j = Math.floor(Math.random() * (i + 1));\n+      [dataToShuffle[i], dataToShuffle[j]] = [dataToShuffle[j], dataToShuffle[i]];\n+    }\n+    // Deduplicate records by companyName + firstName + lastName.\n+    // Merge the college fields into an array.\n+    const deduped = Object.values(\n+      dataToShuffle.reduce((acc, item) => {\n+        const key = `${item.companyName}_${item.firstName}_${item.lastName}`;\n+        if (!acc[key]) {\n+          acc[key] = { ...item, colleges: [item.college] };\n+        } else {\n+          if (item.college && !acc[key].colleges.includes(item.college)) {\n+            acc[key].colleges.push(item.college);\n+          }\n+        }\n+        return acc;\n+      }, {})\n+    );\n+    setData(deduped);\n+  }, []);\n+\n+  // Callback for applying filters from FilterBar\n+  const applyFilters = (newFilters) => {\n+    setFilters(newFilters);\n+    setVisibleCount(5); // Reset visible count on filter change\n   };\n \n-  const filteredData = copyData.filter(item => {\n+  // Filter data based on the advanced filter criteria.\n+  const filteredData = data.filter(item => {\n+    // Use the merged \"colleges\" field if available, otherwise the single college value.\n+    const collegeStr = Array.isArray(item.colleges)\n+      ? item.colleges.join(' ').toLowerCase()\n+      : (item.college || \"\").toLowerCase();\n+    const industry = (item.companyIndustry || \"\").toLowerCase();\n+    const location = (item.currentLocation || \"\").toLowerCase();\n+    const followers = item.linkedinFollowersCount || 0;\n+    const minFollowers = filters.followersMin ? parseInt(filters.followersMin, 10) : 0;\n+    const maxFollowers = filters.followersMax ? parseInt(filters.followersMax, 10) : Infinity;\n+\n     return (\n-      item.college.toLowerCase().includes(filters.college.toLowerCase()) &&\n-      item.companyIndustry.toLowerCase().includes(filters.companyIndustry.toLowerCase()) &&\n-      item.currentLocation.toLowerCase().includes(filters.currentLocation.toLowerCase())\n+      collegeStr.includes(filters.college.toLowerCase()) &&\n+      industry.includes(filters.companyIndustry.toLowerCase()) &&\n+      location.includes(filters.currentLocation.toLowerCase()) &&\n+      followers >= minFollowers &&\n+      followers <= maxFollowers\n     );\n   });\n \n+  let displayedData = [...filteredData];\n+  if (filters.sortBy === 'random') {\n+    // Shuffle the filtered array using Fisher-Yates\n+    for (let i = displayedData.length - 1; i > 0; i--) {\n+      const j = Math.floor(Math.random() * (i + 1));\n+      [displayedData[i], displayedData[j]] = [displayedData[j], displayedData[i]];\n+    }\n+  } else if (filters.sortBy === 'college') {\n+    displayedData.sort((a, b) => {\n+      const aColleges = Array.isArray(a.colleges) ? a.colleges.join(' ') : (a.college || \"\");\n+      const bColleges = Array.isArray(b.colleges) ? b.colleges.join(' ') : (b.college || \"\");\n+      return aColleges.localeCompare(bColleges);\n+    });\n+  } else if (filters.sortBy === 'companyName') {\n+    displayedData.sort((a, b) => (a.companyName || \"\").localeCompare(b.companyName || \"\"));\n+  } else if (filters.sortBy === 'linkedinFollowersCount') {\n+    displayedData.sort((a, b) => (b.linkedinFollowersCount || 0) - (a.linkedinFollowersCount || 0));\n+  }\n+\n+  const handleLoadMore = () => {\n+    setVisibleCount(prev => prev + 5);\n+  };\n+\n   return (\n     <div className=\"app-container\">\n       <aside className=\"sidebar\">\n-        <FilterBar filters={filters} onFilterChange={handleFilterChange} />\n+        <FilterBar onApplyFilters={applyFilters} />\n       </aside>\n       <main className=\"content\">\n-        {filteredData.length ? (\n-          filteredData.map((item, index) => (\n-            <StartupCard key={index} data={item} />\n-          ))\n+        {displayedData.length ? (\n+          <>\n+            {displayedData.slice(0, visibleCount).map((item, index) => (\n+              <StartupCard key={index} data={item} />\n+            ))}\n+            {visibleCount < displayedData.length && (\n+              <button className=\"load-more\" onClick={handleLoadMore}>\n+                Load More\n+              </button>\n+            )}\n+          </>\n         ) : (\n           <p className=\"no-results\">No matching results.</p>\n         )}\n       </main>\n"
                },
                {
                    "date": 1743074711447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   });\n \n   let displayedData = [...filteredData];\n   if (filters.sortBy === 'random') {\n-    // Shuffle the filtered array using Fisher-Yates\n+    //Fisher-Yates Algo\n     for (let i = displayedData.length - 1; i > 0; i--) {\n       const j = Math.floor(Math.random() * (i + 1));\n       [displayedData[i], displayedData[j]] = [displayedData[j], displayedData[i]];\n     }\n"
                }
            ],
            "date": 1743071120583,
            "name": "Commit-0",
            "content": "// src/App.js\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\nimport HomePage from './pages/HomePage';\n// (Add additional pages if needed)\nimport Navbar from './components/layout/Navbar';\nimport Footer from './components/layout/Footer';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        {/* Additional routes can go here */}\n      </Routes>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n"
        }
    ]
}